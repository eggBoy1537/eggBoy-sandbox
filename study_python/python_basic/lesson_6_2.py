'''各オブジェクトに対応するメソッドがあるのは，オブジェクトの設計図「クラス」がpythonで定義されているから'''

#code_6_4:リテラルやクラス名関数を用いたオブジェクトの生成
int_value1 = 0                      #①リテラルによる生成．数値リテラルの使用．
int_value2 = int()                  #②クラス名関数による生成．intクラスのコンストラクタ呼び出し．
int_value3 = int(9)                 #②クラス名関数による生成．引数9を渡して生成．
int_value4 = []                     #①リテラルによる生成．空リストリテラルの使用．
int_value5 = list()                 #②クラス名関数による生成．listクラスのコンストラクタ呼び出し．
int_value6 = list(('松田', '浅木'))     #②クラス名関数による生成．タプルを渡して生成．
'''クラスに基づいてオブジェクトを生成する方法2つ'''
'''①リテラルを用いる(使われるクラスは記述に応じて自動的に決まる．'''
'''②クラス名と同名の関数を呼び出す'''

'''クラスについても関数と同様に自作が可能．'''
#code_6_5:勇者を表すクラスの定義と利用
class Hero:                     #オブジェクトを作るための設計図「クラス」を定義．type型オブジェクト．
    name = '松田'
    hp = 100                    #クラス変数(オブジェクト(インスタンス)の属性)の定義．※計算処理などはクラス定義の中には入れず，下のメソッド(ここではsleep)で行う．
    def sleep(self, hours):     #メソッドの定義．
        print(f'{self.name}は{hours}時間寝た!')
        self.hp += hours

#ゲーム開始
print('すっきりファンタジーⅫ　～金色の理想郷～')
h = Hero()                      #クラス名と同名の関数を呼び出しオブジェクトを生成 ．hに代入．
#print(type(h))                 #<class '__main__.Hero'>　→ 「__main__」はこのファイル内で定義されたクラス，という意味．
h.sleep(3)                      #「オブジェクト.メソッド()」の順で使用できている．(例：list.append)
print(f'{h.name}のHPは現在{h.hp}です')    #「オブジェクト.属性」でクラス変数へのアクセス，変更が可能．

'''自作クラスではクラス変数(属性)に名前を付与できるため，アクセスする際には「オブジェクト.属性」のように記述する.'''
'''既存のlist等は属性がインデックスやキー管理のため，「オブジェクト[属性]」のような書き方でアクセス，変更をする．'''
'''strやdatetimeなど，名前付き属性も存在するケースもあるがイミュータブル(変更不可，read-only)のため，自作関数と全く同じ記述方法ではない．'''

'''「self」は呼び出し元のオブジェクトが入る．第一引数にオブジェクトが入る仕様．'''
'''self以外で記述しても動作に影響ないが慣例としてselfで記述するため推奨されない．'''